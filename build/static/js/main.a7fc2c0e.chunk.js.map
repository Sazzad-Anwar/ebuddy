{"version":3,"sources":["Redux/Constants.jsx","Screens/HomeScreen.jsx","Redux/Actons.jsx","CustomComponents/NotFound.jsx","Components/ProtectedRoute.jsx","Screens/Login.jsx","Screens/Chat.jsx","Routes/AppRoutes.jsx","App.js","Redux/store.js","Redux/Reducers.jsx","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAILED","USER_LOGOUT","USER_UPDATE_SUCCESS","USER_UPDATE_FAILED","HomeScreen","addToast","useToasts","userData","useSelector","state","userLogin","history","useHistory","dispatch","useDispatch","useState","name","setName","email","setEmail","images","setImages","uploadFile","e","a","files","target","formData","FormData","i","length","append","axios","post","data","map","image","preImage","filePath","console","log","response","removeFile","id","uploadId","split","delete","filter","singleImage","useEffect","user","isLoggedIn","push","className","style","height","Container","Row","Col","lg","xs","md","Form","onSubmit","preventDefault","photo","type","payload","message","autoDismiss","appearance","Avatar","alt","src","width","IconButton","onClick","Group","controlId","Label","Control","value","onChange","placeholder","htmlFor","accept","Button","variant","NotFound","position","top","left","transform","ProtectedRoute","children","rest","render","location","to","pathname","from","Login","Typography","component","Chat","users","setUsers","roomUser","setRoomUser","messages","setMessages","setMessage","search","setSearch","socket","useRef","current","io","on","othersData","allUsers","userInfo","joinedUser","leavingUser","chat","prevMessages","emit","off","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","disconnect","fluid","backgroundColor","InputGroup","Text","FormControl","aria-label","aria-describedby","Card","body","isActive","cursor","Badge","badgeContent","userMessage","color","moment","fromNow","updatedAt","messageDetails","marginRight","sendAt","marginLeft","_id","file","Date","now","as","rows","AppRoutes","path","exact","App","reducer","combineReducers","action","loading","error","getUser","localStorage","getItem","JSON","parse","initialState","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorkerRegistration"],"mappings":"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","file":"static/js/main.a7fc2c0e.chunk.js","sourcesContent":["export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\r\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\r\nexport const USER_LOGIN_FAILED = 'USER_LOGIN_FAILED';\r\nexport const USER_LOGOUT = 'USER_LOGOUT';\r\nexport const USER_UPDATE_SUCCESS = 'USER_UPDATE_SUCCESS';\r\nexport const USER_UPDATE_FAILED = 'USER_UPDATE_FAILED';\r\n","/* eslint-disable no-plusplus */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable prettier/prettier */\r\n// import { Typography } from '@material-ui/core';\r\nimport { Button, Col, Container, Form, Image, Row } from 'react-bootstrap';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport axios from 'axios';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport { userLogin } from '../Redux/Actons';\r\n\r\nconst HomeScreen = () => {\r\n    const { addToast } = useToasts();\r\n    const userData = useSelector((state) => state.userLogin);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [images, setImages] = useState([]);\r\n\r\n    const uploadFile = async (e) => {\r\n        const { files } = e.target;\r\n        const formData = new FormData();\r\n        for (let i = 0; i < files.length; i++) {\r\n            formData.append('uploads', files[i]);\r\n        }\r\n\r\n        try {\r\n            const { data } = await axios.post('/api/v1/upload', formData);\r\n            data.map((image) => setImages((preImage) => [...preImage, image.filePath]));\r\n        } catch (error) {\r\n            console.log(error.response);\r\n        }\r\n    };\r\n\r\n    const removeFile = async (id) => {\r\n        const uploadId = id.split('/uploads/')[1];\r\n        console.log({ id, uploadId });\r\n        await axios.delete(`/api/v1/upload/${uploadId}`);\r\n        setImages(images.filter((singleImage) => singleImage !== id));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!name || !email) {\r\n            addToast('Name or Email can not be null', {\r\n                autoDismiss: true,\r\n                appearance: 'error',\r\n            });\r\n        } else {\r\n            const data = { name, email, photo: images[0] };\r\n            dispatch(userLogin(data));\r\n            history.push('/chat');\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (userData && userData.user?.isLoggedIn) {\r\n            history.push('/chat');\r\n        }\r\n    }, [history, userData]);\r\n\r\n    return (\r\n        <div className=\"bg-primary\" style={{ height: '100vh' }}>\r\n            <Container className=\"pt-5\">\r\n                <h3 className=\"text-white pt-5 text-center\">Login To Chat</h3>\r\n                <Row>\r\n                    <Col lg={4} />\r\n                    <Col xs={12} md={12} lg={4}>\r\n                        <Form onSubmit={handleSubmit} className=\"my-5\">\r\n                            <div className=\"d-flex justify-content-center align-items-center position-relative photo\">\r\n                                <Avatar\r\n                                    alt={name}\r\n                                    src={images[0]}\r\n                                    style={{ height: 150, width: 150 }}\r\n                                />\r\n                                {images[0] && (\r\n                                    <IconButton\r\n                                        className=\"position-absolute delete__icon\"\r\n                                        onClick={() => removeFile(images[0])}\r\n                                    >\r\n                                        <CancelIcon className=\"text-white\" />\r\n                                    </IconButton>\r\n                                )}\r\n                            </div>\r\n                            <Form.Group className=\"mb-3\" controlId=\"name\">\r\n                                <Form.Label className=\"text-white\">User Name</Form.Label>\r\n                                <Form.Control\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter Name\"\r\n                                    htmlFor=\"name\"\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" controlId=\"email\">\r\n                                <Form.Label className=\"text-white\">Email address</Form.Label>\r\n                                <Form.Control\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                    type=\"email\"\r\n                                    placeholder=\"Enter email\"\r\n                                    htmlFor=\"email\"\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" controlId=\"photo\">\r\n                                <Form.Label className=\"text-white\">Upload Your Photo</Form.Label>\r\n                                <div className=\"input-group mb-3\">\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        className=\"form-control\"\r\n                                        accept=\"image/*\"\r\n                                        onChange={uploadFile}\r\n                                        placeholder=\"Input Photos\"\r\n                                        id=\"inputGroupFile02\"\r\n                                    />\r\n                                </div>\r\n                            </Form.Group>\r\n\r\n                            <Button variant=\"outline-secondary w-100\" type=\"submit\">\r\n                                Login\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col lg={4} />\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","/* eslint-disable import/prefer-default-export */\r\nimport axios from 'axios';\r\nimport {\r\n    USER_LOGIN_FAILED,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGOUT,\r\n    USER_UPDATE_FAILED,\r\n    USER_UPDATE_SUCCESS,\r\n} from './Constants';\r\n\r\nexport const userLogin = (user) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST,\r\n        });\r\n\r\n        const { data } = await axios.post('/api/v1/user', user);\r\n        // localStorage.setItem('user', JSON.stringify(user));\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data.user,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAILED,\r\n            payload: error.response ? error.response : error.message,\r\n        });\r\n    }\r\n};\r\n\r\nexport const userLogout = () => async (dispatch) => {\r\n    // localStorage.removeItem('user');\r\n    dispatch({\r\n        type: USER_LOGOUT,\r\n    });\r\n};\r\n\r\nexport const userUpdate = (user) => async (dispatch) => {\r\n    try {\r\n        const { data } = await axios.put('/api/v1/user', user);\r\n        console.log('from action', data.user);\r\n        // localStorage.setItem('user', JSON.stringify(user));\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n            payload: data.user,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAILED,\r\n            payload: error.response ? error.response : error.message,\r\n        });\r\n    }\r\n};\r\n","const NotFound = () => (\r\n    <div\r\n        style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%,-50%)' }}\r\n    >\r\n        <h4>404 | Page Not Found</h4>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n// import { useToasts } from 'react-toast-notifications';\r\n// import { useEffect } from 'react';\r\n\r\nconst ProtectedRoute = ({ children, ...rest }) => {\r\n    const { user } = useSelector((state) => state.userLogin);\r\n    // const { addToast } = useToasts();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                user && user.isLoggedIn ? (\r\n                    children\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: '/',\r\n                            state: { from: location },\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\nexport default ProtectedRoute;\r\n","import { Typography } from '@material-ui/core';\r\n\r\nconst Login = () => (\r\n    <>\r\n        <Typography\r\n            component=\"h1\"\r\n            variant=\"h4\"\r\n            style={{\r\n                position: 'absolute',\r\n                left: '50%',\r\n                top: '50%',\r\n                transform: 'translate(-50%,-50%)',\r\n            }}\r\n        >\r\n            This is login page\r\n        </Typography>\r\n    </>\r\n);\r\n\r\nexport default Login;\r\n","/* eslint-disable no-underscore-dangle */\r\n/* eslint-disable no-unused-vars */\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport {\r\n    Button,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    FormControl,\r\n    InputGroup,\r\n    Nav,\r\n    Navbar,\r\n    NavDropdown,\r\n    Row,\r\n} from 'react-bootstrap';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Link, NavLink, useHistory, useLocation } from 'react-router-dom';\r\nimport { Avatar, Card, Badge, IconButton } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport { io } from 'socket.io-client';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { userLogout, userUpdate } from '../Redux/Actons';\r\n\r\nconst Chat = () => {\r\n    const { user } = useSelector((state) => state.userLogin);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [users, setUsers] = useState([]);\r\n    const { addToast } = useToasts();\r\n    const [roomUser, setRoomUser] = useState({});\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [search, setSearch] = useState('');\r\n    const [userDetailsUpdate, setUserDetailsUpdate] = useState();\r\n\r\n    // const socket = io('/');\r\n    const socket = useRef(null);\r\n\r\n    useEffect(() => {\r\n        socket.current = io('/');\r\n        socket.current.on('user-joined', (userData) => {\r\n            const othersData = userData.allUsers.filter(\r\n                (userInfo) => userInfo.email !== user.email\r\n            );\r\n            console.log(userData.joinedUser);\r\n            if (userData.joinedUser && userData.joinedUser.email !== user.email) {\r\n                addToast(`${userData.joinedUser.name} is active`, {\r\n                    appearance: 'info',\r\n                    autoDismiss: true,\r\n                });\r\n            } else if (userData.leavingUser && userData.leavingUser.email !== user.email) {\r\n                addToast(`${userData.leavingUser.name} has left`, {\r\n                    appearance: 'info',\r\n                    autoDismiss: true,\r\n                });\r\n                setRoomUser({});\r\n            }\r\n            setUsers(othersData);\r\n        });\r\n        socket.current.on('room-user-details', (userData) => {\r\n            setRoomUser(userData);\r\n        });\r\n        // socket.current.on('roomUser', (userData) => {\r\n        //     setRoomUser(userData);\r\n        // });\r\n        socket.current.on('chat-message', (chat) => {\r\n            setMessages((prevMessages) => [...prevMessages, chat]);\r\n        });\r\n        socket.current.emit('user-login', user);\r\n\r\n        // dispatch(userUpdate(userDetailsUpdate));\r\n\r\n        return () => {\r\n            socket.current.off('user-joined', (data) => {});\r\n            socket.current.off('room-user-details', (userData) => {});\r\n            socket.current.off('chat-message', (chat) => {});\r\n            // socket.current.off('roomUser', (userData) => {});\r\n        };\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [addToast, user, search]);\r\n\r\n    const findRoomUser = (email) => {\r\n        setRoomUser(users.filter((userInfo) => userInfo.email === email)[0]);\r\n    };\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        const chat = {\r\n            user: user._id,\r\n            from: user.email,\r\n            file: '',\r\n            to: roomUser.email,\r\n            message,\r\n            sendAt: Date.now(),\r\n        };\r\n        if (message) {\r\n            // setMessages([...messages, chat]);\r\n            setMessage('');\r\n            socket.current.emit('message', chat);\r\n            setMessages((prevMessages) => [...prevMessages, chat]);\r\n        } else {\r\n            addToast('Please Write something', {\r\n                appearance: 'info',\r\n                autoDismiss: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"dark\" expand=\"lg\">\r\n                <Container>\r\n                    <Link to=\"/\">\r\n                        <Navbar.Brand className=\"text-white\">Chat Application</Navbar.Brand>\r\n                    </Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"ms-auto\">\r\n                            <Nav.Link className=\"text-white\">\r\n                                <NavLink to=\"/\">Home</NavLink>\r\n                            </Nav.Link>\r\n                            <Nav.Link className=\"text-white\">{user.name}</Nav.Link>\r\n                            <Nav.Link className=\"text-white\">{user.email}</Nav.Link>\r\n                            <IconButton\r\n                                className=\"fs-7\"\r\n                                onClick={() => {\r\n                                    dispatch(userLogout());\r\n                                    socket.current.disconnect();\r\n                                    history.push('/');\r\n                                }}\r\n                            >\r\n                                <ExitToAppIcon className=\"text-white\" />\r\n                            </IconButton>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n\r\n            <Container fluid=\"lg\">\r\n                <Row>\r\n                    <Col\r\n                        md={3}\r\n                        style={{ height: 'calc(100vh - 72px)', backgroundColor: '#1c2834' }}\r\n                    >\r\n                        <div className=\"search__bar\">\r\n                            <InputGroup className=\"py-3\">\r\n                                <InputGroup.Text id=\"search\" className=\"bg-white border-end-0\">\r\n                                    <SearchIcon />\r\n                                </InputGroup.Text>\r\n                                <FormControl\r\n                                    className=\"border-start-0\"\r\n                                    placeholder=\"Username\"\r\n                                    aria-label=\"Username\"\r\n                                    aria-describedby=\"search\"\r\n                                    value={search}\r\n                                    onChange={(e) => setSearch(e.target.value)}\r\n                                    type=\"text\"\r\n                                />\r\n                            </InputGroup>\r\n                        </div>\r\n                        {users &&\r\n                            users.map((userInfo) => (\r\n                                <Card\r\n                                    body\r\n                                    className={\r\n                                        userInfo.isActive\r\n                                            ? 'bg-success p-2 d-flex align-items-center mb-3'\r\n                                            : 'bg-dark p-2 d-flex align-items-center mb-3'\r\n                                    }\r\n                                    key={userInfo.email}\r\n                                    style={{ cursor: 'pointer' }}\r\n                                    onClick={() => {\r\n                                        findRoomUser(userInfo.email);\r\n                                    }}\r\n                                >\r\n                                    <Badge\r\n                                        badgeContent={\r\n                                            userInfo.isActive\r\n                                                ? messages.filter(\r\n                                                      (userMessage) =>\r\n                                                          userMessage.from === userInfo.email\r\n                                                  ).length\r\n                                                : 0\r\n                                        }\r\n                                        color=\"primary\"\r\n                                    >\r\n                                        <Avatar alt={userInfo.name} src={userInfo.photo} />\r\n                                    </Badge>\r\n\r\n                                    <div className=\"ps-3 \">\r\n                                        <h5 className=\"text-white my-0\">{userInfo.name}</h5>\r\n                                        <p className=\"text-white my-0\">\r\n                                            {userInfo.isActive\r\n                                                ? 'Active Now'\r\n                                                : `Left ${moment().fromNow(userInfo.updatedAt)}`}\r\n                                            {}\r\n                                        </p>\r\n                                    </div>\r\n                                </Card>\r\n                            ))}\r\n                        {/* <Card body className=\"bg-dark p-2 d-flex align-items-center my-2\">\r\n                            <Avatar alt=\"Sazzad\" src=\"https://picsum.photos/200\" />\r\n                            <div className=\"ps-3 \">\r\n                                <h5 className=\"text-white my-0\">Sazzad</h5>\r\n                                <p className=\"text-white my-0\">{moment().fromNow()}</p>\r\n                            </div>\r\n                        </Card> */}\r\n                    </Col>\r\n                    <Col md={9} className=\"bg-primary\">\r\n                        <main className=\"position-relative h-100\">\r\n                            {roomUser.name ? (\r\n                                <>\r\n                                    <section\r\n                                        className=\"message__header d-flex align-items-center py-4 px-2 border-bottom\"\r\n                                        id=\"user__head\"\r\n                                    >\r\n                                        <Avatar\r\n                                            alt={roomUser.name}\r\n                                            src={roomUser.photo}\r\n                                            style={{ height: 50, width: 50 }}\r\n                                        />\r\n                                        <div className=\"ps-3\">\r\n                                            <h4 className=\"text-white my-0\">{roomUser.name}</h4>\r\n                                            <p className=\"text-white my-0\">\r\n                                                {roomUser.isActive\r\n                                                    ? 'Active now'\r\n                                                    : `Left ${moment().fromNow(\r\n                                                          roomUser.updatedAt\r\n                                                      )}`}\r\n                                            </p>\r\n                                        </div>\r\n                                    </section>\r\n                                    <ScrollToBottom\r\n                                        className=\"message__body overflow-auto position-relative\"\r\n                                        // style={{\r\n                                        //     height: `calc(100vh - (${\r\n                                        //         userHeadHeight + textAreaHeight + 75\r\n                                        //     }px))`,\r\n                                        // }}\r\n                                    >\r\n                                        {messages &&\r\n                                            messages.map((messageDetails) => {\r\n                                                if (\r\n                                                    user.email !== messageDetails.from &&\r\n                                                    roomUser.email === messageDetails.from &&\r\n                                                    user.email === messageDetails.to\r\n                                                ) {\r\n                                                    return (\r\n                                                        <div\r\n                                                            className=\"d-flex my-3 chat__buddy\"\r\n                                                            style={{ marginRight: '20%' }}\r\n                                                            key={messageDetails.id}\r\n                                                        >\r\n                                                            <Avatar\r\n                                                                alt={messageDetails.name}\r\n                                                                src={messageDetails.photo}\r\n                                                            />\r\n                                                            <div>\r\n                                                                <Card\r\n                                                                    body\r\n                                                                    className=\"chat__card chat__person ms-3 p-2\"\r\n                                                                    style={{ width: '100%' }}\r\n                                                                >\r\n                                                                    {messageDetails.message}\r\n                                                                </Card>\r\n                                                                <p className=\"text-white ms-3\">\r\n                                                                    {moment().fromNow(\r\n                                                                        messageDetails.sendAt\r\n                                                                    )}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    );\r\n                                                }\r\n                                                if (\r\n                                                    user.email === messageDetails.from &&\r\n                                                    roomUser.email === messageDetails.to\r\n                                                ) {\r\n                                                    return (\r\n                                                        <div\r\n                                                            className=\"d-flex flex-column justify-content-end align-items-end my-3\"\r\n                                                            style={{ marginLeft: '20%' }}\r\n                                                            key={messageDetails.id}\r\n                                                        >\r\n                                                            <div className=\"d-flex my__chat text-right justify-content-end\">\r\n                                                                <Card\r\n                                                                    body\r\n                                                                    className=\"chat__card chat__person me-3 p-2\"\r\n                                                                    style={{ width: '100%' }}\r\n                                                                >\r\n                                                                    {messageDetails.message}\r\n                                                                </Card>\r\n                                                                <Avatar\r\n                                                                    alt={messageDetails.name}\r\n                                                                    src={messageDetails.photo}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <p className=\"text-white me-5\">\r\n                                                                {moment().fromNow(\r\n                                                                    messageDetails.sendAt\r\n                                                                )}\r\n                                                            </p>\r\n                                                        </div>\r\n                                                    );\r\n                                                }\r\n                                                if (roomUser.email !== messageDetails.to) {\r\n                                                    return null;\r\n                                                }\r\n                                                return null;\r\n                                            })}\r\n                                    </ScrollToBottom>\r\n                                    <section\r\n                                        className=\"input__area position-absolute bottom-0 start-0 end-0\"\r\n                                        id=\"text__area\"\r\n                                    >\r\n                                        <form\r\n                                            onSubmit={sendMessage}\r\n                                            className=\"d-flex justify-content-center align-items-start\"\r\n                                        >\r\n                                            <Form.Group\r\n                                                className=\"mb-3 w-100\"\r\n                                                controlId=\"exampleForm.ControlTextarea1\"\r\n                                            >\r\n                                                <Form.Control\r\n                                                    value={message}\r\n                                                    onChange={(e) => setMessage(e.target.value)}\r\n                                                    as=\"textarea\"\r\n                                                    rows={3}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Button\r\n                                                variant=\"outline-secondary\"\r\n                                                className=\"ms-2\"\r\n                                                type=\"submit\"\r\n                                            >\r\n                                                Send\r\n                                            </Button>\r\n                                        </form>\r\n                                    </section>\r\n                                </>\r\n                            ) : (\r\n                                <div\r\n                                    style={{\r\n                                        position: 'absolute',\r\n                                        top: '50%',\r\n                                        left: '50%',\r\n                                        transform: 'translate(-50%,-50%)',\r\n                                    }}\r\n                                >\r\n                                    <h4 className=\"text-white\">Please Select a conversation</h4>\r\n                                </div>\r\n                            )}\r\n                        </main>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import { Switch, Route, Redirect } from 'react-router-dom';\r\nimport HomeScreen from '../Screens/HomeScreen';\r\nimport NotFound from '../CustomComponents/NotFound';\r\nimport ProtectedRoute from '../Components/ProtectedRoute';\r\nimport Login from '../Screens/Login';\r\nimport Chat from '../Screens/Chat';\r\n\r\nconst AppRoutes = () => (\r\n    <Switch>\r\n        <Route path=\"/login\" component={Login} />\r\n        <ProtectedRoute path=\"/chat\">\r\n            <Chat />\r\n        </ProtectedRoute>\r\n        <Route path=\"/not-found\" component={NotFound} />\r\n        <Route exact path=\"/\" component={HomeScreen} />\r\n        <Redirect to=\"/not-found\" />\r\n    </Switch>\r\n);\r\n\r\nexport default AppRoutes;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport AppRoutes from './Routes/AppRoutes';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './assets/css/global.css';\r\nimport './assets/css/custom.css';\r\n\r\nconst App = () => (\r\n    <Router>\r\n        <Route path=\"/\" component={AppRoutes} />\r\n    </Router>\r\n);\r\n\r\nexport default App;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport { loginReducer } from './Reducers';\r\n\r\nconst reducer = combineReducers({\r\n    userLogin: loginReducer,\r\n});\r\n\r\nconst getUser = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : {};\r\n\r\nconst initialState = {\r\n    userLogin: {\r\n        user: getUser.isLoggedIn ? getUser : { isLoggedIn: false },\r\n    },\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","/* eslint-disable import/prefer-default-export */\r\nimport {\r\n    USER_LOGIN_FAILED,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGOUT,\r\n    USER_UPDATE_FAILED,\r\n    USER_UPDATE_SUCCESS,\r\n} from './Constants';\r\n\r\nexport const loginReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN_REQUEST:\r\n            return { loading: true };\r\n        case USER_LOGIN_SUCCESS:\r\n            return { loading: false, user: action.payload };\r\n        case USER_UPDATE_SUCCESS:\r\n            return { loading: false, user: action.payload };\r\n        case USER_UPDATE_FAILED:\r\n            return { loading: false, error: action.payload };\r\n        case USER_LOGIN_FAILED:\r\n            return { loading: false, error: action.payload };\r\n        case USER_LOGOUT:\r\n            return {};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\nimport App from './App';\r\nimport store from './Redux/store';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as ServiceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ToastProvider>\r\n            <App />\r\n        </ToastProvider>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nServiceWorkerRegistration.register();\r\n"],"sourceRoot":""}